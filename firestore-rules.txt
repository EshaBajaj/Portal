rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow users to read and write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow any authenticated user to read user documents (for role checking)
      allow read: if request.auth != null;
      
      // Allow admins to read and update any user document
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Companies collection - allow read for all authenticated users, write for recruiters
    match /companies/{companyId} {
      allow read: if request.auth != null;
      
      // Allow recruiters to create/update their company profiles
      allow create, update: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'recruiter';
      
      // Allow company owner to update/delete their own company
      allow update, delete: if request.auth != null && 
        request.auth.uid == resource.data.ownerId;
    }

    // Jobs collection - status-based access control
    match /jobs/{jobId} {
      function isAdmin() {
        return request.auth != null && 
          exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }
      
      function isRecruiter() {
        return request.auth != null && 
          exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'recruiter';
      }
      
      // Students can read only active jobs; admins and recruiters can read all
      allow read: if request.auth != null && (
        resource.data.status == 'active' || isAdmin() || isRecruiter()
      );
      
      // Admins can create/update/delete all jobs
      allow create: if isAdmin();
      allow update, delete: if isAdmin();
      
      // Recruiters can create jobs and update/delete their own jobs
      allow create: if isRecruiter();
      allow update, delete: if isRecruiter() && request.auth.uid == resource.data.recruiterId;
    }
    
    // Applications collection
    match /applications/{applicationId} {
      // Students can create applications for themselves
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.studentId;
      
      // Students can read/update their own applications
      allow read, update: if request.auth != null && 
        request.auth.uid == resource.data.studentId;
      
      // Recruiters can read applications for their jobs
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/jobs/$(resource.data.jobId)) &&
        request.auth.uid == get(/databases/$(database)/documents/jobs/$(resource.data.jobId)).data.recruiterId;
      
      // Recruiters can update application status for their jobs
      allow update: if request.auth != null && 
        exists(/databases/$(database)/documents/jobs/$(resource.data.jobId)) &&
        request.auth.uid == get(/databases/$(database)/documents/jobs/$(resource.data.jobId)).data.recruiterId;
    }

    // Students collection - allow each authenticated user to manage their own profile
    match /students/{studentId} {
      // Read own profile or by admins
      allow read: if request.auth != null && (
        request.auth.uid == studentId || (
          exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
        )
      );

      // Create/Update/Delete only own profile or by admins
      allow create: if request.auth != null && request.auth.uid == studentId;
      allow update, delete: if request.auth != null && (
        request.auth.uid == studentId || (
          exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
        )
      );
    }

    // Skills collection - per-student access control
    match /skills/{skillId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.studentId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.studentId;
    }

    // Projects collection - per-student access control
    match /projects/{projectId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.studentId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.studentId;
    }

    // Coding profiles collection - per-student access control
    match /coding_profiles/{profileId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.studentId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.studentId;
    }

    // Educational background collection - per-student access control
    match /educational_background/{educationId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.studentId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.studentId;
    }

    // Achievements collection - per-student access control
    match /achievements/{achievementId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.studentId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.studentId;
    }

    // Resumes collection - top-level collection for base64 resume storage
    match /resumes/{resumeId} {
      // Allow users to create/read/update/delete their own resumes
      // resumeId format: ${userId}_${timestamp}
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      
      allow read, update, delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // Allow admins to read all resumes
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users/{userId}/resumes subcollection - per-user access control
    match /users/{userId}/resumes/{resumeId} {
      // Owner can create their resume doc(s)
      allow create: if request.auth != null && request.auth.uid == userId;
      // Owner can read/update/delete their resume doc(s)
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;

      // Analyses subcollection - owner-only
      match /analyses/{analysisId} {
        allow create: if request.auth != null && request.auth.uid == userId;
        allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      }
    }
  }
}
