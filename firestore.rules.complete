rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow users to read and write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow any authenticated user to read user documents (for role checking)
      allow read: if request.auth != null;
      
      // Allow admins to read and update any user document
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Students collection - NEW: Student profile management
    match /students/{studentId} {
      // Students can read and write their own profile
      allow read, write: if request.auth != null && request.auth.uid == studentId;
      
      // Admins can read and write all student profiles
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      // Recruiters can read student profiles for job matching
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'recruiter';
    }

    // Skills collection - Student skills management
    match /skills/{skillId} {
      // Students can manage their own skills
      allow read, write: if request.auth != null && request.auth.uid == resource.data.studentId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.studentId;
      
      // Admins can read all skills
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Educational background collection - Student education data
    match /educational_background/{educationId} {
      // Students can manage their own educational background
      allow read, write: if request.auth != null && request.auth.uid == resource.data.studentId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.studentId;
      
      // Admins can read all educational background data
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Projects collection - Student projects management
    match /projects/{projectId} {
      // Students can manage their own projects
      allow read, write: if request.auth != null && request.auth.uid == resource.data.studentId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.studentId;
      
      // Admins can read all projects
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      // Recruiters can read projects for job matching
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'recruiter';
    }

    // Achievements collection - Student achievements management
    match /achievements/{achievementId} {
      // Students can manage their own achievements
      allow read, write: if request.auth != null && request.auth.uid == resource.data.studentId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.studentId;
      
      // Admins can read all achievements
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      // Recruiters can read achievements for job matching
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'recruiter';
    }

    // Email notifications collection - NEW: For job posting notifications
    match /emailNotifications/{notificationId} {
      // Only admins can read/write email notifications
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      // System can create notifications (for backend processes)
      allow create: if request.auth == null; // For server-side operations
    }

    // Unsubscribed users collection - NEW: Email unsubscribe management
    match /unsubscribedUsers/{unsubscribeId} {
      // Allow anyone to create unsubscribe records (for unsubscribe links)
      allow create: if true;
      
      // Only admins can read unsubscribe data
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Notifications collection - In-app notifications
    match /notifications/{notificationId} {
      // Users can read their own notifications
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      
      // Admins can create notifications for users
      allow create: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      // Users can update their own notifications (mark as read)
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        request.resource.diff(resource).affectedKeys().hasOnly(['read', 'readAt']);
    }
    
    // Companies collection - allow read for all authenticated users, write for recruiters
    match /companies/{companyId} {
      allow read: if request.auth != null;
      
      // Allow recruiters to create/update their company profiles
      allow create, update: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'recruiter';
      
      // Allow company owner to update/delete their own company
      allow update, delete: if request.auth != null && 
        request.auth.uid == resource.data.ownerId;
    }

    // Jobs collection - UPDATED: Enhanced for job filtering and status management
    match /jobs/{jobId} {
      function isAdmin() {
        return request.auth != null && 
          exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }
      
      function isRecruiter() {
        return request.auth != null && 
          exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'recruiter';
      }

      function isStudent() {
        return request.auth != null && 
          exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
      }
      
      // Students can read posted jobs; admins and recruiters can read all
      allow read: if request.auth != null && (
        (isStudent() && (resource.data.status == 'posted' || resource.data.isPosted == true)) ||
        isAdmin() || 
        isRecruiter()
      );
      
      // Admins can create/update/delete all jobs
      allow create, update, delete: if isAdmin();
      
      // Recruiters can create/update their own jobs
      allow create, update: if isRecruiter() && 
        request.resource.data.postedBy == request.auth.uid;
    }
    
    // Applications collection - UPDATED: Enhanced for student applications
    match /applications/{applicationId} {
      function isAdmin() {
        return request.auth != null && 
          exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }

      // Students can read their own applications
      // Recruiters can read applications for their jobs  
      // Admins can read all applications
      allow read: if request.auth != null && (
        resource.data.studentId == request.auth.uid ||
        resource.data.applicantId == request.auth.uid ||
        (exists(/databases/$(database)/documents/jobs/$(resource.data.jobId)) &&
         get(/databases/$(database)/documents/jobs/$(resource.data.jobId)).data.postedBy == request.auth.uid) ||
        isAdmin()
      );
      
      // Students can create applications for themselves
      allow create: if request.auth != null && 
        (request.resource.data.studentId == request.auth.uid ||
         request.resource.data.applicantId == request.auth.uid);
      
      // Recruiters can update application status for their jobs
      // Admins can update any application
      allow update: if request.auth != null && (
        (exists(/databases/$(database)/documents/jobs/$(resource.data.jobId)) &&
         get(/databases/$(database)/documents/jobs/$(resource.data.jobId)).data.postedBy == request.auth.uid &&
         request.resource.diff(resource).affectedKeys().hasOnly(['status', 'updatedAt'])) ||
        isAdmin()
      );
    }
    
    // Resumes collection - per-user access control
    match /resumes/{resumeId} {
      // Allow users to read their own resumes
      // Allow recruiters to read resumes of applicants
      // Allow admins to read all resumes
      allow read: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'recruiter' ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      
      // Users can create/update their own resumes
      allow create, update: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
      
      // Users can delete their own resumes
      // Admins can delete any resume
      allow delete: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
    }
    
    // Coding profiles collection - per-student access control
    match /coding_profiles/{profileId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.studentId;
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.studentId;
    }
    
    // Assessments collection
    match /assessments/{assessmentId} {
      // Admins can read/write all assessments
      allow read, write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      // Students can read their own assessments
      allow read: if request.auth != null && 
        resource.data.studentId == request.auth.uid;
    }
    
    // Assessment attempts collection
    match /assessment_attempts/{attemptId} {
      // Students can create attempts for their assessments
      allow create: if request.auth != null && 
        request.resource.data.studentId == request.auth.uid;
      
      // Students can read their own attempts
      // Admins can read all attempts
      allow read: if request.auth != null && (
        resource.data.studentId == request.auth.uid ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      
      // Students can update their own attempts (for saving progress)
      allow update: if request.auth != null && 
        resource.data.studentId == request.auth.uid &&
        resource.data.status == 'in_progress';
    }
    
    // Default deny all other operations
    match /{document=**} {
      allow read, write: if false;
    }
  }
}